# Excel シート削除ツール（画像保持版）

## 📋 概要
Excelファイルから不要なシートを削除するGUIツールです。画像やチャートを保持したまま安全にシートを削除できる「安全なZIP方式」と、高速処理の「openpyxl方式」の2つの処理方法を選択できます。

## ✨ 主な機能
- **2つの削除方式**
  - 🛡️ **安全なZIP方式**：画像・チャート保持（推奨）
  - ⚡ **openpyxl方式**：高速処理（画像消失の可能性）
- **直感的なGUI**：使いやすいチェックボックス形式
- **安全性**：自動バックアップ機能
- **一括操作**：全選択・全解除機能
- **リアルタイム情報**：ファイルサイズ・シート数表示

## 🚀 使用方法

### 1. 環境準備
```bash
# 必要なライブラリをインストール
pip install openpyxl
```

### 2. アプリケーション起動
```bash
python excel_sheet_deleter.py
```

### 3. 基本操作フロー
1. **ファイル選択**
   - 「参照」ボタンでExcelファイルを選択
   - または直接パスを入力
   - 「読み込み」ボタンでファイルを解析

2. **処理方式選択**
   - 🛡️ **安全なZIP方式**（推奨）：画像・チャートを保持
   - ⚡ **openpyxl方式**：高速だが画像が消失する可能性

3. **シート選択**
   - 削除したいシートにチェック
   - 「全選択」「全解除」ボタンで一括操作

4. **削除実行**
   - 「バックアップを作成」がONになっていることを確認
   - 「選択したシートを削除」ボタンをクリック

## 🏗️ システム構成

### クラス構造
```
ExcelSheetDeleterGUI
├── __init__()              # GUI初期化
├── create_widgets()        # UI要素作成
├── browse_file()           # ファイル選択
├── load_file()             # ファイル読み込み
├── analyze_excel_structure() # Excel構造解析
├── delete_sheets_safe_zip_method() # 安全なZIP方式
├── delete_sheets_openpyxl_method() # openpyxl方式
└── update_*_xml()          # XML更新メソッド群
```

### 主要メソッド

#### ファイル処理
- `analyze_excel_structure()`: ExcelファイルのZIP構造を解析
- `load_file()`: ファイル読み込みとUI更新

#### 削除処理
- `delete_sheets_safe_zip_method()`: ZIP形式での安全な削除
- `delete_sheets_openpyxl_method()`: openpyxlライブラリでの削除

#### XML更新
- `update_workbook_xml_safe()`: workbook.xmlの更新
- `update_workbook_rels_safe()`: リレーションシップ情報の更新
- `update_content_types_xml()`: コンテンツタイプ情報の更新

## 🔧 技術仕様

### 対応ファイル形式
- `.xlsx` (Excel 2007以降)
- `.xls` (Excel 97-2003) ※制限あり

### 処理方式比較

| 方式 | 画像保持 | チャート保持 | 処理速度 | 安全性 |
|------|----------|--------------|----------|--------|
| 安全なZIP方式 | ✅ | ✅ | 標準 | 高 |
| openpyxl方式 | ❌ | ❌ | 高速 | 中 |

### セーフティ機能
- **最低1シート保持**: すべてのシートの削除を防止
- **自動バックアップ**: タイムスタンプ付きバックアップファイル生成
- **エラーハンドリング**: 包括的な例外処理

## 📁 ファイル構造

### 初期設定
```python
self.file_path = r"C:\Users\yukik\Desktop\excel\test\sales_demo_data.xlsx"
```

### バックアップファイル命名規則
```
元ファイル名_backup_YYYYMMDD_HHMMSS.xlsx
例: sales_demo_data_backup_20250909_143052.xlsx
```

## ⚠️ 注意事項

### 安全な使用のために
1. **バックアップ作成**: 必ず有効にしてください
2. **ファイル権限**: 編集権限があることを確認
3. **ファイルクローズ**: 対象ファイルがExcelで開かれていないことを確認

### 制限事項
- **最低シート数**: 1つ以上のシートが必要
- **ファイルロック**: 他のアプリケーションで開いているファイルは処理不可
- **大容量ファイル**: メモリ不足に注意

## 🐛 トラブルシューティング

### よくある問題と解決方法

#### ファイル読み込みエラー
```
原因: ファイルが他のアプリケーションで開かれている
解決: Excelを閉じてから再実行
```

#### 削除処理失敗
```
原因: ファイル権限またはディスク容量不足
解決: 管理者権限で実行、ディスク容量確認
```

#### ZIP方式での処理エラー
```
原因: 破損したExcelファイル
解決: openpyxl方式を試用、またはファイル修復
```

## 🔄 バージョン履歴

### 機能追加予定
- [ ] Excel形式自動判定
- [ ] 一括処理（複数ファイル）
- [ ] ログファイル出力
- [ ] シート内容プレビュー

## 💡 開発者向け情報

### 依存関係
```python
import tkinter as tk          # GUI
from tkinter import ttk       # モダンUI要素
import openpyxl              # Excel処理
import zipfile               # ZIP操作
from xml.etree import ElementTree  # XML処理
```

### カスタマイズポイント
- **初期ファイルパス**: `self.file_path`で変更
- **UI要素**: `create_widgets()`でレイアウト調整
- **処理ロジック**: 各削除メソッドで機能拡張

### テスト推奨項目
- [ ] 画像付きExcelファイルでの削除テスト
- [ ] チャート付きExcelファイルでの削除テスト
- [ ] 大容量ファイルでの性能テスト
- [ ] エラー条件でのロバスト性テスト

---

## 📞 サポート
問題が発生した場合は、エラーメッセージとともに以下の情報をご提供ください：
- Excelファイルのサイズ
- シート数
- 使用した処理方式
- 実行環境（Python版、OS）
